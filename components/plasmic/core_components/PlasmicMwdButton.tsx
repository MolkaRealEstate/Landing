/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7GsYLBFUNeTrFmDS32b5nF
// Component: pYryLA7Ql_9H

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7GsYLBFUNeTrFmDS32b5nF/projectcss
import sty from "./PlasmicMwdButton.module.css"; // plasmic-import: pYryLA7Ql_9H/css

import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: TtgL1CcSOm0h/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 63aLwty0bF81/icon

createPlasmicElementProxy;

export type PlasmicMwdButton__VariantMembers = {
  withoutText: "withoutText";
  size: "large" | "medium" | "small";
  type: "primary" | "secondary" | "tertiary" | "ghost";
  hasEndIcon: "hasEndIcon";
  hasStartIcon: "hasStartIcon";
};
export type PlasmicMwdButton__VariantsArgs = {
  withoutText?: SingleBooleanChoiceArg<"withoutText">;
  size?: SingleChoiceArg<"large" | "medium" | "small">;
  type?: SingleChoiceArg<"primary" | "secondary" | "tertiary" | "ghost">;
  hasEndIcon?: SingleBooleanChoiceArg<"hasEndIcon">;
  hasStartIcon?: SingleBooleanChoiceArg<"hasStartIcon">;
};
type VariantPropType = keyof PlasmicMwdButton__VariantsArgs;
export const PlasmicMwdButton__VariantProps = new Array<VariantPropType>(
  "withoutText",
  "size",
  "type",
  "hasEndIcon",
  "hasStartIcon"
);

export type PlasmicMwdButton__ArgsType = {
  text?: string;
  onClick?: () => void;
};
type ArgPropType = keyof PlasmicMwdButton__ArgsType;
export const PlasmicMwdButton__ArgProps = new Array<ArgPropType>(
  "text",
  "onClick"
);

export type PlasmicMwdButton__OverridesType = {
  root?: Flex__<"div">;
  primaryLargeDefaultWithTextYes?: Flex__<"div">;
  endPrimary?: Flex__<typeof PlasmicImg__>;
  endSecondary?: Flex__<"svg">;
  text?: Flex__<"div">;
  startPrimary?: Flex__<typeof PlasmicImg__>;
  startSecondary?: Flex__<"svg">;
};

export interface DefaultMwdButtonProps {
  text?: string;
  onClick?: () => void;
  withoutText?: SingleBooleanChoiceArg<"withoutText">;
  size?: SingleChoiceArg<"large" | "medium" | "small">;
  type?: SingleChoiceArg<"primary" | "secondary" | "tertiary" | "ghost">;
  hasEndIcon?: SingleBooleanChoiceArg<"hasEndIcon">;
  hasStartIcon?: SingleBooleanChoiceArg<"hasStartIcon">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMwdButton__RenderFunc(props: {
  variants: PlasmicMwdButton__VariantsArgs;
  args: PlasmicMwdButton__ArgsType;
  overrides: PlasmicMwdButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "withoutText",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.withoutText
      },
      {
        path: "size",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.size
      },
      {
        path: "type",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.type
      },
      {
        path: "hasEndIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasEndIcon
      },
      {
        path: "hasStartIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.hasStartIcon
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootsize_large]: hasVariant($state, "size", "large"),
          [sty.rootsize_large_hasEndIcon_hasStartIcon_type_primary]:
            hasVariant($state, "hasEndIcon", "hasEndIcon") &&
            hasVariant($state, "hasStartIcon", "hasStartIcon") &&
            hasVariant($state, "size", "large") &&
            hasVariant($state, "type", "primary"),
          [sty.rootsize_large_hasStartIcon_type_primary]:
            hasVariant($state, "hasStartIcon", "hasStartIcon") &&
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "size", "large"),
          [sty.rootsize_large_type_ghost]:
            hasVariant($state, "size", "large") &&
            hasVariant($state, "type", "ghost"),
          [sty.rootsize_large_type_primary]:
            hasVariant($state, "size", "large") &&
            hasVariant($state, "type", "primary"),
          [sty.rootsize_large_type_tertiary]:
            hasVariant($state, "type", "tertiary") &&
            hasVariant($state, "size", "large"),
          [sty.rootsize_small_hasEndIcon_hasStartIcon_type_primary]:
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "size", "small") &&
            hasVariant($state, "hasEndIcon", "hasEndIcon") &&
            hasVariant($state, "hasStartIcon", "hasStartIcon"),
          [sty.rootsize_small_hasEndIcon_type_ghost]:
            hasVariant($state, "size", "small") &&
            hasVariant($state, "type", "ghost") &&
            hasVariant($state, "hasEndIcon", "hasEndIcon"),
          [sty.rootsize_small_type_ghost]:
            hasVariant($state, "type", "ghost") &&
            hasVariant($state, "size", "small"),
          [sty.rootsize_small_type_tertiary]:
            hasVariant($state, "type", "tertiary") &&
            hasVariant($state, "size", "small"),
          [sty.roottype_ghost_size_medium]:
            hasVariant($state, "size", "medium") &&
            hasVariant($state, "type", "ghost"),
          [sty.roottype_secondary]: hasVariant($state, "type", "secondary"),
          [sty.roottype_secondary_size_large]:
            hasVariant($state, "type", "secondary") &&
            hasVariant($state, "size", "large"),
          [sty.roottype_secondary_size_large_hasStartIcon]:
            hasVariant($state, "size", "large") &&
            hasVariant($state, "type", "secondary") &&
            hasVariant($state, "hasStartIcon", "hasStartIcon"),
          [sty.roottype_secondary_size_medium]:
            hasVariant($state, "size", "medium") &&
            hasVariant($state, "type", "secondary"),
          [sty.roottype_secondary_size_small]:
            hasVariant($state, "size", "small") &&
            hasVariant($state, "type", "secondary"),
          [sty.roottype_tertiary_hasStartIcon_size_medium]:
            hasVariant($state, "hasStartIcon", "hasStartIcon") &&
            hasVariant($state, "size", "medium") &&
            hasVariant($state, "type", "tertiary"),
          [sty.roottype_tertiary_size_medium]:
            hasVariant($state, "size", "medium") &&
            hasVariant($state, "type", "tertiary"),
          [sty.rootwithoutText]: hasVariant(
            $state,
            "withoutText",
            "withoutText"
          ),
          [sty.rootwithoutText_size_large]:
            hasVariant($state, "withoutText", "withoutText") &&
            hasVariant($state, "size", "large"),
          [sty.rootwithoutText_size_large_type_primary]:
            hasVariant($state, "size", "large") &&
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "withoutText", "withoutText"),
          [sty.rootwithoutText_size_small_type_primary]:
            hasVariant($state, "withoutText", "withoutText") &&
            hasVariant($state, "type", "primary") &&
            hasVariant($state, "size", "small")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"primaryLargeDefaultWithTextYes"}
        data-plasmic-override={overrides.primaryLargeDefaultWithTextYes}
        hasGap={true}
        className={classNames(
          projectcss.all,
          sty.primaryLargeDefaultWithTextYes,
          {
            [sty.primaryLargeDefaultWithTextYeshasEndIcon]: hasVariant(
              $state,
              "hasEndIcon",
              "hasEndIcon"
            ),
            [sty.primaryLargeDefaultWithTextYeshasEndIcon_hasStartIcon_type_ghost_size_medium]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYeshasStartIcon]: hasVariant(
              $state,
              "hasStartIcon",
              "hasStartIcon"
            ),
            [sty.primaryLargeDefaultWithTextYeshasStartIcon_type_ghost_size_medium]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYessize_large]: hasVariant(
              $state,
              "size",
              "large"
            ),
            [sty.primaryLargeDefaultWithTextYessize_large_hasEndIcon_hasStartIcon_type_primary]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "primary"),
            [sty.primaryLargeDefaultWithTextYessize_large_hasEndIcon_type_ghost]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYessize_large_hasStartIcon_type_ghost]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYessize_large_hasStartIcon_type_primary]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "size", "large"),
            [sty.primaryLargeDefaultWithTextYessize_large_type_ghost]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYessize_large_type_primary]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "primary"),
            [sty.primaryLargeDefaultWithTextYessize_large_type_tertiary]:
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "large"),
            [sty.primaryLargeDefaultWithTextYessize_large_type_tertiary_hasStartIcon]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon"),
            [sty.primaryLargeDefaultWithTextYessize_medium]: hasVariant(
              $state,
              "size",
              "medium"
            ),
            [sty.primaryLargeDefaultWithTextYessize_small]: hasVariant(
              $state,
              "size",
              "small"
            ),
            [sty.primaryLargeDefaultWithTextYessize_small_hasEndIcon_hasStartIcon_type_primary]:
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon"),
            [sty.primaryLargeDefaultWithTextYessize_small_hasEndIcon_type_ghost]:
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon"),
            [sty.primaryLargeDefaultWithTextYessize_small_hasStartIcon_type_ghost]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYessize_small_type_ghost]:
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "size", "small"),
            [sty.primaryLargeDefaultWithTextYessize_small_type_tertiary]:
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "small"),
            [sty.primaryLargeDefaultWithTextYestype_ghost]: hasVariant(
              $state,
              "type",
              "ghost"
            ),
            [sty.primaryLargeDefaultWithTextYestype_ghost_size_medium]:
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost"),
            [sty.primaryLargeDefaultWithTextYestype_secondary]: hasVariant(
              $state,
              "type",
              "secondary"
            ),
            [sty.primaryLargeDefaultWithTextYestype_secondary_hasStartIcon_size_medium]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "secondary"),
            [sty.primaryLargeDefaultWithTextYestype_secondary_size_large]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary"),
            [sty.primaryLargeDefaultWithTextYestype_secondary_size_large_hasEndIcon_hasStartIcon]:
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "large"),
            [sty.primaryLargeDefaultWithTextYestype_secondary_size_large_hasStartIcon]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon"),
            [sty.primaryLargeDefaultWithTextYestype_secondary_size_medium]:
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "secondary"),
            [sty.primaryLargeDefaultWithTextYestype_secondary_size_small]:
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary"),
            [sty.primaryLargeDefaultWithTextYestype_secondary_size_small_hasEndIcon]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary"),
            [sty.primaryLargeDefaultWithTextYestype_tertiary]: hasVariant(
              $state,
              "type",
              "tertiary"
            ),
            [sty.primaryLargeDefaultWithTextYestype_tertiary_hasStartIcon_size_medium]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "tertiary"),
            [sty.primaryLargeDefaultWithTextYestype_tertiary_size_medium]:
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "tertiary"),
            [sty.primaryLargeDefaultWithTextYeswithoutText]: hasVariant(
              $state,
              "withoutText",
              "withoutText"
            ),
            [sty.primaryLargeDefaultWithTextYeswithoutText_size_large]:
              hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "large"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_size_large_type_ghost]:
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "withoutText", "withoutText"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_size_large_type_tertiary]:
              hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_size_small_type_ghost]:
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "withoutText", "withoutText"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_size_small_type_primary]:
              hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "size", "small"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_size_small_type_tertiary]:
              hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "tertiary"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_type_ghost_size_medium]:
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "withoutText", "withoutText"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_type_secondary_size_large]:
              hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_type_secondary_size_medium]:
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withoutText", "withoutText"),
            [sty.primaryLargeDefaultWithTextYeswithoutText_type_tertiary_size_medium]:
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withoutText", "withoutText")
          }
        )}
        onClick={async event => {
          const $steps = {};

          $steps["runOnClick"] = true
            ? (() => {
                const actionArgs = { eventRef: $props["onClick"] };
                return (({ eventRef, args }) => {
                  return eventRef?.(...(args ?? []));
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["runOnClick"] != null &&
            typeof $steps["runOnClick"] === "object" &&
            typeof $steps["runOnClick"].then === "function"
          ) {
            $steps["runOnClick"] = await $steps["runOnClick"];
          }
        }}
      >
        <PlasmicImg__
          data-plasmic-name={"endPrimary"}
          data-plasmic-override={overrides.endPrimary}
          alt={""}
          className={classNames(sty.endPrimary, {
            [sty.endPrimaryhasEndIcon]: hasVariant(
              $state,
              "hasEndIcon",
              "hasEndIcon"
            ),
            [sty.endPrimaryhasEndIcon_type_ghost_size_medium]:
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon"),
            [sty.endPrimarysize_large_hasEndIcon_type_ghost]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost"),
            [sty.endPrimarysize_large_type_tertiary_hasEndIcon]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon"),
            [sty.endPrimarysize_small_hasEndIcon_type_ghost]:
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon"),
            [sty.endPrimarysize_small_type_tertiary_hasEndIcon]:
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon"),
            [sty.endPrimarytype_secondary_hasEndIcon_size_medium]:
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon"),
            [sty.endPrimarytype_secondary_size_large_hasEndIcon]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary"),
            [sty.endPrimarytype_secondary_size_small_hasEndIcon]:
              hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary"),
            [sty.endPrimarytype_tertiary_hasEndIcon_size_medium]:
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
          })}
          displayHeight={"24px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"24px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/core_components/images/image3.svg",
            fullWidth: 24,
            fullHeight: 24,
            aspectRatio: 1
          }}
        />

        {(
          hasVariant($state, "size", "small") &&
          hasVariant($state, "type", "ghost") &&
          hasVariant($state, "hasEndIcon", "hasEndIcon") &&
          triggers.hover_root
            ? true
            : hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
            ? true
            : hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
            ? true
            : hasVariant($state, "type", "ghost") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
            ? true
            : hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary")
            ? true
            : hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
            ? true
            : hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost")
            ? true
            : hasVariant($state, "type", "secondary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
            ? true
            : hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasEndIcon", "hasEndIcon")
            ? true
            : hasVariant($state, "hasEndIcon", "hasEndIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary")
            ? true
            : false
        ) ? (
          <Icon7Icon
            data-plasmic-name={"endSecondary"}
            data-plasmic-override={overrides.endSecondary}
            className={classNames(projectcss.all, sty.endSecondary, {
              [sty.endSecondaryhasEndIcon_type_ghost_size_medium]:
                hasVariant($state, "type", "ghost") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon"),
              [sty.endSecondarysize_large_hasEndIcon_type_ghost]:
                hasVariant($state, "hasEndIcon", "hasEndIcon") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "ghost"),
              [sty.endSecondarysize_large_type_tertiary_hasEndIcon]:
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "tertiary") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon"),
              [sty.endSecondarysize_small_hasEndIcon_type_ghost]:
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "ghost") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon"),
              [sty.endSecondarysize_small_type_tertiary_hasEndIcon]:
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "tertiary") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon"),
              [sty.endSecondarytype_secondary_hasEndIcon_size_medium]:
                hasVariant($state, "type", "secondary") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon"),
              [sty.endSecondarytype_secondary_size_large_hasEndIcon]:
                hasVariant($state, "hasEndIcon", "hasEndIcon") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "secondary"),
              [sty.endSecondarytype_secondary_size_small_hasEndIcon]:
                hasVariant($state, "hasEndIcon", "hasEndIcon") &&
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "secondary"),
              [sty.endSecondarytype_tertiary_hasEndIcon_size_medium]:
                hasVariant($state, "type", "tertiary") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon")
            })}
            role={"img"}
          />
        ) : null}
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.texthasEndIcon]: hasVariant(
                $state,
                "hasEndIcon",
                "hasEndIcon"
              ),
              [sty.texthasStartIcon]: hasVariant(
                $state,
                "hasStartIcon",
                "hasStartIcon"
              ),
              [sty.textsize_large_hasEndIcon_hasStartIcon_type_primary]:
                hasVariant($state, "hasEndIcon", "hasEndIcon") &&
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "primary"),
              [sty.texttype_ghost]: hasVariant($state, "type", "ghost"),
              [sty.texttype_secondary]: hasVariant($state, "type", "secondary"),
              [sty.texttype_secondary_size_large_hasEndIcon_hasStartIcon]:
                hasVariant($state, "type", "secondary") &&
                hasVariant($state, "hasEndIcon", "hasEndIcon") &&
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "large"),
              [sty.texttype_tertiary]: hasVariant($state, "type", "tertiary"),
              [sty.texttype_tertiary_hasStartIcon_size_medium]:
                hasVariant($state, "type", "tertiary") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "hasStartIcon", "hasStartIcon"),
              [sty.textwithoutText]: hasVariant(
                $state,
                "withoutText",
                "withoutText"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.text;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u062f\u06a9\u0645\u0647";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <PlasmicImg__
          data-plasmic-name={"startPrimary"}
          data-plasmic-override={overrides.startPrimary}
          alt={""}
          className={classNames(sty.startPrimary, {
            [sty.startPrimaryhasStartIcon]: hasVariant(
              $state,
              "hasStartIcon",
              "hasStartIcon"
            ),
            [sty.startPrimaryhasStartIcon_type_ghost_size_medium]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost"),
            [sty.startPrimarysize_large_hasStartIcon_type_ghost]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost"),
            [sty.startPrimarysize_large_hasStartIcon_type_primary]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "size", "large"),
            [sty.startPrimarysize_large_type_tertiary_hasStartIcon]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon"),
            [sty.startPrimarysize_small]: hasVariant($state, "size", "small"),
            [sty.startPrimarysize_small_hasStartIcon_type_ghost]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost"),
            [sty.startPrimarysize_small_type_tertiary_hasStartIcon]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "tertiary"),
            [sty.startPrimarytype_ghost]: hasVariant($state, "type", "ghost"),
            [sty.startPrimarytype_secondary]: hasVariant(
              $state,
              "type",
              "secondary"
            ),
            [sty.startPrimarytype_secondary_hasStartIcon_size_medium]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "secondary"),
            [sty.startPrimarytype_secondary_size_large]:
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "size", "large"),
            [sty.startPrimarytype_secondary_size_large_hasStartIcon]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon"),
            [sty.startPrimarytype_secondary_size_small_hasStartIcon]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary"),
            [sty.startPrimarytype_tertiary]: hasVariant(
              $state,
              "type",
              "tertiary"
            ),
            [sty.startPrimarytype_tertiary_hasStartIcon_size_medium]:
              hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "tertiary"),
            [sty.startPrimarywithoutText]: hasVariant(
              $state,
              "withoutText",
              "withoutText"
            ),
            [sty.startPrimarywithoutText_size_large_type_primary]:
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "primary") &&
              hasVariant($state, "withoutText", "withoutText"),
            [sty.startPrimarywithoutText_type_secondary_size_large]:
              hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary"),
            [sty.startPrimarywithoutText_type_tertiary_size_medium]:
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withoutText", "withoutText")
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"24px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/core_components/images/image2.svg",
            fullWidth: 24,
            fullHeight: 24,
            aspectRatio: 1
          }}
        />

        {(
          hasVariant($state, "hasStartIcon", "hasStartIcon") &&
          hasVariant($state, "size", "small") &&
          hasVariant($state, "type", "ghost")
            ? true
            : hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "tertiary")
            ? true
            : hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost")
            ? true
            : hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary")
            ? true
            : hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "tertiary")
            ? true
            : hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "ghost")
            ? true
            : hasVariant($state, "hasStartIcon", "hasStartIcon") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "secondary")
            ? true
            : hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon")
            ? true
            : hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "hasStartIcon", "hasStartIcon")
            ? true
            : hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "withoutText", "withoutText")
            ? true
            : hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "tertiary")
            ? true
            : hasVariant($state, "size", "medium") &&
              hasVariant($state, "type", "ghost") &&
              hasVariant($state, "withoutText", "withoutText")
            ? true
            : hasVariant($state, "size", "small") &&
              hasVariant($state, "type", "secondary") &&
              hasVariant($state, "withoutText", "withoutText")
            ? true
            : hasVariant($state, "type", "tertiary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withoutText", "withoutText")
            ? true
            : hasVariant($state, "type", "ghost") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "withoutText", "withoutText")
            ? true
            : hasVariant($state, "type", "secondary") &&
              hasVariant($state, "size", "medium") &&
              hasVariant($state, "withoutText", "withoutText")
            ? true
            : hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "tertiary")
            ? true
            : hasVariant($state, "withoutText", "withoutText") &&
              hasVariant($state, "size", "large") &&
              hasVariant($state, "type", "secondary")
            ? true
            : false
        ) ? (
          <Icon6Icon
            data-plasmic-name={"startSecondary"}
            data-plasmic-override={overrides.startSecondary}
            className={classNames(projectcss.all, sty.startSecondary, {
              [sty.startSecondaryhasStartIcon_type_ghost_size_medium]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "type", "ghost"),
              [sty.startSecondarysize_large_hasStartIcon_type_ghost]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "ghost"),
              [sty.startSecondarysize_large_type_tertiary_hasStartIcon]:
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "tertiary") &&
                hasVariant($state, "hasStartIcon", "hasStartIcon"),
              [sty.startSecondarysize_small_hasStartIcon_type_ghost]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "ghost"),
              [sty.startSecondarysize_small_type_tertiary_hasStartIcon]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "tertiary"),
              [sty.startSecondarytype_secondary_hasStartIcon_size_medium]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "type", "secondary"),
              [sty.startSecondarytype_secondary_size_large_hasStartIcon]:
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "secondary") &&
                hasVariant($state, "hasStartIcon", "hasStartIcon"),
              [sty.startSecondarytype_secondary_size_small_hasStartIcon]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "secondary"),
              [sty.startSecondarytype_tertiary_hasStartIcon_size_medium]:
                hasVariant($state, "hasStartIcon", "hasStartIcon") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "type", "tertiary"),
              [sty.startSecondarywithoutText_size_large_type_ghost]:
                hasVariant($state, "type", "ghost") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "withoutText", "withoutText"),
              [sty.startSecondarywithoutText_size_large_type_tertiary]:
                hasVariant($state, "withoutText", "withoutText") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "tertiary"),
              [sty.startSecondarywithoutText_size_small_type_ghost]:
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "ghost") &&
                hasVariant($state, "withoutText", "withoutText"),
              [sty.startSecondarywithoutText_size_small_type_tertiary]:
                hasVariant($state, "withoutText", "withoutText") &&
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "tertiary"),
              [sty.startSecondarywithoutText_type_ghost_size_medium]:
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "type", "ghost") &&
                hasVariant($state, "withoutText", "withoutText"),
              [sty.startSecondarywithoutText_type_secondary_size_large]:
                hasVariant($state, "withoutText", "withoutText") &&
                hasVariant($state, "size", "large") &&
                hasVariant($state, "type", "secondary"),
              [sty.startSecondarywithoutText_type_secondary_size_medium]:
                hasVariant($state, "type", "secondary") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "withoutText", "withoutText"),
              [sty.startSecondarywithoutText_type_secondary_size_small]:
                hasVariant($state, "size", "small") &&
                hasVariant($state, "type", "secondary") &&
                hasVariant($state, "withoutText", "withoutText"),
              [sty.startSecondarywithoutText_type_tertiary_size_medium]:
                hasVariant($state, "type", "tertiary") &&
                hasVariant($state, "size", "medium") &&
                hasVariant($state, "withoutText", "withoutText")
            })}
            role={"img"}
          />
        ) : null}
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "primaryLargeDefaultWithTextYes",
    "endPrimary",
    "endSecondary",
    "text",
    "startPrimary",
    "startSecondary"
  ],
  primaryLargeDefaultWithTextYes: [
    "primaryLargeDefaultWithTextYes",
    "endPrimary",
    "endSecondary",
    "text",
    "startPrimary",
    "startSecondary"
  ],
  endPrimary: ["endPrimary"],
  endSecondary: ["endSecondary"],
  text: ["text"],
  startPrimary: ["startPrimary"],
  startSecondary: ["startSecondary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  primaryLargeDefaultWithTextYes: "div";
  endPrimary: typeof PlasmicImg__;
  endSecondary: "svg";
  text: "div";
  startPrimary: typeof PlasmicImg__;
  startSecondary: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMwdButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMwdButton__VariantsArgs;
    args?: PlasmicMwdButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMwdButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMwdButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMwdButton__ArgProps,
          internalVariantPropNames: PlasmicMwdButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMwdButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMwdButton";
  } else {
    func.displayName = `PlasmicMwdButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMwdButton = Object.assign(
  // Top-level PlasmicMwdButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    primaryLargeDefaultWithTextYes: makeNodeComponent(
      "primaryLargeDefaultWithTextYes"
    ),
    endPrimary: makeNodeComponent("endPrimary"),
    endSecondary: makeNodeComponent("endSecondary"),
    text: makeNodeComponent("text"),
    startPrimary: makeNodeComponent("startPrimary"),
    startSecondary: makeNodeComponent("startSecondary"),

    // Metadata about props expected for PlasmicMwdButton
    internalVariantProps: PlasmicMwdButton__VariantProps,
    internalArgProps: PlasmicMwdButton__ArgProps
  }
);

export default PlasmicMwdButton;
/* prettier-ignore-end */
