/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7GsYLBFUNeTrFmDS32b5nF
// Component: C-aKeh77M_Fc

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MwdNavigationBarButton from "../../MwdNavigationBarButton"; // plasmic-import: lE1d1W0XvqOk/component
import MwdButton from "../../MwdButton"; // plasmic-import: pYryLA7Ql_9H/component

import { useScreenVariants as useScreenVariantsiatb7RnTn0Gb } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Iatb7rnTn0Gb/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 7GsYLBFUNeTrFmDS32b5nF/projectcss
import sty from "./PlasmicMwdNavigationBar.module.css"; // plasmic-import: C-aKeh77M_Fc/css

createPlasmicElementProxy;

export type PlasmicMwdNavigationBar__VariantMembers = {};
export type PlasmicMwdNavigationBar__VariantsArgs = {};
type VariantPropType = keyof PlasmicMwdNavigationBar__VariantsArgs;
export const PlasmicMwdNavigationBar__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMwdNavigationBar__ArgsType = { menuItems?: any };
type ArgPropType = keyof PlasmicMwdNavigationBar__ArgsType;
export const PlasmicMwdNavigationBar__ArgProps = new Array<ArgPropType>(
  "menuItems"
);

export type PlasmicMwdNavigationBar__OverridesType = {
  root?: Flex__<"div">;
  mwdNavigationBarButton?: Flex__<typeof MwdNavigationBarButton>;
  mwdButton?: Flex__<typeof MwdButton>;
};

export interface DefaultMwdNavigationBarProps {
  menuItems?: any;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMwdNavigationBar__RenderFunc(props: {
  variants: PlasmicMwdNavigationBar__VariantsArgs;
  args: PlasmicMwdNavigationBar__ArgsType;
  overrides: PlasmicMwdNavigationBar__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          menuItems: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsiatb7RnTn0Gb()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
      lang={"fa"}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__nC7C1)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.menuItems;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__uxTxf)}
              key={currentIndex}
            >
              <MwdNavigationBarButton
                data-plasmic-name={"mwdNavigationBarButton"}
                data-plasmic-override={overrides.mwdNavigationBarButton}
                className={classNames(
                  "__wab_instance",
                  sty.mwdNavigationBarButton
                )}
                menuItem={(() => {
                  try {
                    return currentItem;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return {};
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </Stack__>
      <MwdButton
        data-plasmic-name={"mwdButton"}
        data-plasmic-override={overrides.mwdButton}
        className={classNames("__wab_instance", sty.mwdButton)}
        onClick={async () => {
          const $steps = {};

          $steps["goToConsultRequest"] = true
            ? (() => {
                const actionArgs = { destination: "#consult-request" };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToConsultRequest"] != null &&
            typeof $steps["goToConsultRequest"] === "object" &&
            typeof $steps["goToConsultRequest"].then === "function"
          ) {
            $steps["goToConsultRequest"] = await $steps["goToConsultRequest"];
          }
        }}
        text={
          "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0645\u0634\u0627\u0648\u0631\u0647"
        }
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "mwdNavigationBarButton", "mwdButton"],
  mwdNavigationBarButton: ["mwdNavigationBarButton"],
  mwdButton: ["mwdButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  mwdNavigationBarButton: typeof MwdNavigationBarButton;
  mwdButton: typeof MwdButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMwdNavigationBar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMwdNavigationBar__VariantsArgs;
    args?: PlasmicMwdNavigationBar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMwdNavigationBar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMwdNavigationBar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMwdNavigationBar__ArgProps,
          internalVariantPropNames: PlasmicMwdNavigationBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMwdNavigationBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMwdNavigationBar";
  } else {
    func.displayName = `PlasmicMwdNavigationBar.${nodeName}`;
  }
  return func;
}

export const PlasmicMwdNavigationBar = Object.assign(
  // Top-level PlasmicMwdNavigationBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    mwdNavigationBarButton: makeNodeComponent("mwdNavigationBarButton"),
    mwdButton: makeNodeComponent("mwdButton"),

    // Metadata about props expected for PlasmicMwdNavigationBar
    internalVariantProps: PlasmicMwdNavigationBar__VariantProps,
    internalArgProps: PlasmicMwdNavigationBar__ArgProps
  }
);

export default PlasmicMwdNavigationBar;
/* prettier-ignore-end */
